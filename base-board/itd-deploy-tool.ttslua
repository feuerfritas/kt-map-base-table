piece_mapping = {
  ["."] = nil,
  [" "] = nil,
  ["+"] = {'column', 0},
  ["|"] = {'wall', 0},
  ["-"] = {'wall', 90},
  ["="] = {'wall', 90},
  ["U"] = {'door', 90},
  ["R"] = {'door', 180},
  ["D"] = {'door', -90},
  ["L"] = {'door', 0},
  ["A"] = {'ender', -90},
  [">"] = {'ender', 0},
  ["V"] = {'ender', 90},
  ["<"] = {'ender', 180},
  ["o"] = {'objective', 0, 7},
  ["1"] = {'objective', 0, 1},
  ["2"] = {'objective', 0, 2},
  ["3"] = {'objective', 0, 3},
  ["4"] = {'objective', 0, 4},
  ["5"] = {'objective', 0, 5},
  ["6"] = {'objective', 0, 6},
}

object_mapping = {
  column = '334a2c',
  wall = '8a2788',
  door = 'e77f34',
  ender = '4acf80',
  objective = '5e0e98',
}

local aops_gallowdark = require('base-board/maps/approved-ops/gallowdark')

layouts = {
  gallowdark = aops_gallowdark
}

selection = 1
selection_guid = '9db70a'
extrabag = nil
extra_guids_to_track = {}

function adjustPiece(object, piece, pieceCounters)
  if piece == 'objective' then
    pieceCounters.objectives = pieceCounters.objectives + 1
    local scale = object.getScale()
    object.setScale({scale.x,0.01,scale.z})
    object.setName('Objective ' .. pieceCounters.objectives)
  end
  if piece == 'door' then
    pieceCounters.doors = pieceCounters.doors + 1
    object.setName('Hatchway Closed ' .. pieceCounters.doors)
  end
end

selected_map = nil
selected_killzone = "gallowdark"

function place(player, value, id)
  remove()
  local mat = getObjectFromGUID("4ee1f2")
  local layout = selected_map.layout
  local double = false

  local customInfo = mat.getCustomObject()

  if selected_map.size ~= nil and selected_map.size == 'double' then
    double = true
    Global.call('enableMultiplayer')
    mat.setScale({x=0.770468831, y=1.0, z=0.663833141 * 2})
    customInfo.diffuse = selected_map.mat
  else
    mat.setScale({x=0.770468831, y=1.0, z=0.663833141})
    customInfo.diffuse = 'http://cloud-3.steamusercontent.com/ugc/1800898887648113801/7726C0DEEA1DEBB387B232D17B54A95638B0347C/'
  end
  mat.setCustomObject(customInfo)
  mat.reload()


  local layout_table = {string.byte(layout, 1, #layout)}
  local symbol
  local object
  -- 9.66 in offset comes from measuring the distance on the ITD board grid
  -- 0.395 is a magic scalar that comes from mapping this to TTS coordinates
  -- measured using trial and error until it looked good
  local offset = (9.66 / 2) * 0.395
  local initial_x = offset * 7 * (1)
  local initial_z = offset * 6 * (-1)
  local objects = {}
  if double then
    initial_z = initial_z + offset * 6 * (-1) - (1.22 * 0.395)
  end
  local x = initial_x
  local y = 0.98
  local z = initial_z

  local pieceCounters = {
    doors = 0,
    objectives = 0
  }
  local line = 1
  for i=1, #layout_table do
    symbol = string.char(layout_table[i])
    if symbol == '\n' then
      x = initial_x
      line = line + 1
      if line == 14 or line == 15 then
        z = z + 1.22 * 0.395
      else
        z = z + offset
      end
    else
      local piece = piece_mapping[symbol]
      if piece then
        local position = {x=x,y=y,z=z}
        local copy
        object = getObjectFromGUID(object_mapping[piece[1]])
        if object then
          copy = object.clone({position = position})
        else
          -- probably the objective was taken by another bag, spawn a new one
          local bag = getObjectFromGUID('a1da2d') -- objective bag
          copy = bag.takeObject({position = position, smooth=false})
        end
        adjustPiece(copy, piece[1], pieceCounters)
        copy.setLock(true)
        copy.setPosition(position)
        copy.rotate({x=0,y=piece[2],z=0})
        -- small hack here as original pieces don't have the Tag, but their other states do
        -- it might be better to dynamically create them here
        -- so that original pieces are not on the table and we can add any customization we need
        copy.addTag('ITD_Piece')
        table.insert(objects, copy)
      elseif symbol != ' ' and symbol != '.' then
          print('missing object for ' .. symbol)
      end
      x = x - offset
    end
  end
  if selected_map.extrabag then
    placeItemsFromExtraBag(selected_map.extrabag)
  end
  local blue = {0.2,0.2,0.8,0.5}
  local white = {1,1,1,0.5}
  local red = {1,0,0,0.5}
  if selected_map.deploy == "Horizontal" then
    local scale = {14,1.2,14}
    local rotation = {0,90,0}
    createBarrier({initial_x - 7*offset, 0, initial_z + 2*offset}, blue, scale, rotation) -- blue DZ
    createBarrier({initial_x - 7*offset, 0, initial_z + 2*offset + 6}, blue, scale, rotation) -- 6" from blue DZ
    createBarrier({initial_x - 7*offset, 0, initial_z + 6*offset}, white, scale, rotation) -- center line
    createBarrier({initial_x - 7*offset, 0, initial_z + 10*offset - 6}, red, scale, rotation) -- 6" from red DZ
    createBarrier({initial_x - 7*offset, 0, initial_z + 10*offset}, red, scale, rotation) -- red DZ
  elseif selected_map.deploy == "Vertical" then
    local scale = {12,1.2,12}
    local rotation = {0,0,0}
    local obj
    obj = createBarrier({initial_x - 2*offset, 0, initial_z + 6*offset}, red, scale, rotation) -- red DZ
    table.insert(objects, obj)
    obj = createBarrier({initial_x - 2*offset - 6, 0, initial_z + 6*offset}, red, scale, rotation) -- 6" from red DZ
    table.insert(objects, obj)
    obj = createBarrier({initial_x - 7*offset, 0, initial_z + 6*offset}, white, scale, rotation) -- center line
    table.insert(objects, obj)
    obj = createBarrier({initial_x - 12*offset + 6, 0, initial_z + 6*offset}, blue, scale, rotation) -- 6" from blue DZ
    table.insert(objects, obj)
    obj = createBarrier({initial_x - 12*offset, 0, initial_z + 6*offset}, blue, scale, rotation) -- blue DZ
    table.insert(objects, obj)
    Wait.frames(function()
        for _, obj in pairs(objects) do
          rotateAroundPivot(obj, 90, {x=0,y=0,z=0})
        end
        local mat = getObjectFromGUID("4ee1f2")
        mat.rotate({0,90,0})
      end,
      1
    )
  end
end

function placeItemsFromExtraBag(guid)
  extrabag = getObjectFromGUID(guid)
  if extrabag then
    extrabag.call('buttonClick_place')
  end
end

function recallItemsFromExtraBag()
  if extrabag then
    extrabag.call('buttonClick_recall')
  end
  extrabag = nil
end

function rotateAroundPivot(obj, angle, origin)
    local startingPos = obj.getPosition()
    local angleRad = math.rad(angle)

    startingPos = {x = startingPos.x - origin.x,
                   y = startingPos.y - origin.y,
                   z = startingPos.z - origin.z}
    local finalPos = {x = startingPos.x * math.cos(angleRad) - startingPos.z * math.sin(angleRad),
                y = startingPos.y,
                z = startingPos.x * math.sin(angleRad) + startingPos.z * math.cos(angleRad)}
    finalPos = {x = finalPos.x + origin.x,
                y = finalPos.y + origin.y,
                z = finalPos.z + origin.z}
    --obj.setRotation(finalRot)
    obj.rotate({x=0,y=-angle,z=0})
    obj.setPosition(finalPos)
end

function remove(player, value, id)
  if extrabag then
    recallItemsFromExtraBag(selected_map.extrabag)
  end
  local mat = getObjectFromGUID("4ee1f2")
  mat.setRotation({0,0,0})
  for _, piece in pairs(getObjectsWithTag('ITD_Piece')) do
    if piece then
      piece.destruct()
    end
  end
  for i, guid in pairs(extra_guids_to_track) do
    if guid then
      o = getObjectFromGUID(guid)
      if o then
        o.destruct()
      end
    end
  end
  extra_guids_to_track = {}
end

function selectMission(mission_id)
  selection = mission_id
  if mission_id == 0 then
    self.UI.setAttribute('map-name', 'text', "Map selector tool")
    self.UI.setAttribute('map-image', 'active', false)
    self.UI.setAttribute('map-help', 'active', true)
    selected_map = nil
  else
    selected_map = layouts[selected_killzone][selection]
    self.UI.setAttribute('map-name', 'text', selected_killzone .. ' - ' .. selected_map.name)
    self.UI.setAttribute('map-image', 'image', selected_killzone .. '-' .. selected_map.name)
    self.UI.setAttribute('map-image', 'active', true)
    self.UI.setAttribute('map-name', 'active', true)
    self.UI.setAttribute('map-help', 'active', false)
  end
end

function onSelectMission(player, value)
  selectMission(tonumber(value))
end

function createBarrier(pos, color, scale, rotation)
    --print("MAT :"..customInfo.diffuse..":")
    local clone=spawnObject({
        type              = "Custom_Model",
        position          = pos
    })
    clone.setLuaScript("")
    clone.setCustomObject({
        mesh="http://cloud-3.steamusercontent.com/ugc/929311677228065725/08A047560B3B217463EB39969C8BD76749A0A723/",
        collider="http://cloud-3.steamusercontent.com/ugc/929311677228789723/30C5477595CD1E06E955200433657907C192EA8A/",
        material = 3
    })
    clone.setColorTint(color)
    clone.setScale(scale)
    clone.setRotation(rotation)
    clone.setLock(true)
    clone.interactable=true
    clone.addTag('ITD_Piece')
    clone.addTag('Barrier')
    return clone
end

function toggleNarrative(player, value, id)
  local narrativeActive = not (self.UI.getAttribute('narrative', 'active') == 'true')
  self.UI.setAttribute('narrative', 'active', narrativeActive and 'true' or 'false')
end

function setKillzone(player, value)
  if selected_killzone then
    --self.UI.setAttribute('button-' .. value, 'class', 'killzone')
  end
  selected_killzone = value
  --self.UI.setAttribute('button-' .. value, 'class', 'killzone-selected')
end

function generateDeck(player, value, id)
  for i=1, #layouts do
    local spec = {
      type="CardCustom",
      position=self.getPosition(),
    }
    local params = {
      face=layouts[i].image,
      back="http://cloud-3.steamusercontent.com/ugc/1949524926154083501/F82FC49E1B544EE742D2C94D6F0DF0EE7707BBB4/"
    }
    local obj = spawnObject(spec)
    obj.setCustomObject(params)
    obj.setScale({2,2,2})
    obj.setName(layouts[i].name)
  end
end

function onSave()
  return JSON.encode({
    selection = selection
  })
end

function onLoad(state)
  if state then
    local state = JSON.decode(state)
    if state then
      selection = state["selection"] or 0
    end
  end
  local assets = {}
  for k, killzone in pairs(layouts) do
    for i, map in pairs(killzone) do
      table.insert(assets, {
        name = k .. "-" .. map.name,
        url = map.image
      })
    end
  end
  self.UI.setCustomAssets(assets)
  buildUI()
  selectMission(selection)
end

function buildUI()
  self.UI.setXml([[
<Defaults>
    <Text color="#e74f0aff" />
    <Text class="darker" color="#1B1B1B" />
    <Panel color="#353839" />
    <Slider color="#353839" />
    <Button color="#353839" textColor="#e74f0aff" height="70" fontStyle="bold" fontSize="28" />
    <Button class="killzone" color="#353839" textColor="#e74f0aff" height="70" fontStyle="bold" fontSize="28" />
    <Button class="killzone-selected" color="#e74f0aff" textColor="#353839" height="70" fontStyle="bold" fontSize="28" />
</Defaults>
  <Panel height="1000" width="810" position="0 0 -11">
      <Text id="map-name" fontStyle="bold" height="100" fontSize="40" rectAlignment="UpperCenter" >Map Selector tool</Text>
      <Text id="map-help" fontStyle="bold" fontSize="40" rectAlignment="MiddleCenter" >Use slider below to select map and then press Place button</Text>
      <Image id="map-image" preserveAspect="true" height="80%" rectAlignment="MiddleCenter" image="" raycastTarget="false" active="false"/>
  </Panel>
  <Panel height="210" width="810" position = "0 -580 -10" rotation = "0 0 0" scale="1 1 1" id="itd-menu" active="true" childAlignment="UpperCenter" rectAlignment="UpperCenter">
    <VerticalLayout>
      <HorizontalLayout height="70">
        <Slider minValue="0" maxValue="6" value="0" wholeNumbers="true" onValueChanged="onSelectMission" />
      </HorizontalLayout>
      <HorizontalLayout height="70">
        <Button onClick="place" >Place</Button>
        <Button onClick="remove" >Remove</Button>
        <Button onClick="generateDeck" height="70" active="false" fontStyle="bold" fontSize="30" id="generate-cards" >Generate Deck</Button>
      </HorizontalLayout>
      <HorizontalLayout height="70" id="narrative" active="true">
        <Button onClick="setKillzone(gallowdark)" class="killzone" id="button-gallowdark" >Gallowdark</Button>
        <Button onClick="setKillzone(generic)" class="killzone" id="button-generic" >Non Specific</Button>
        <Button onClick="setKillzone(volkus)" class="killzone" id="button-volkus" >Volkus</Button>
        <Button onClick="setKillzone(bhetadecima)" class="killzone" id="button-bhetadecima" >Bheta-Decima</Button>
      </HorizontalLayout>
    </VerticalLayout>
  </Panel>
  ]]
  )
end

buildUI()
