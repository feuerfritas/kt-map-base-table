piece_mapping = {
  ["."] = nil,
  [" "] = nil,
  ["+"] = {'column', 0},
  ["|"] = {'wall', 0},
  ["-"] = {'wall', 90},
  ["="] = {'wall', 90},
  ["U"] = {'door', -90},
  ["R"] = {'door', 0},
  ["D"] = {'door', 90},
  ["L"] = {'door', 180},
  ["A"] = {'ender', -90},
  [">"] = {'ender', 0},
  ["V"] = {'ender', 90},
  ["<"] = {'ender', 180},
  ["o"] = {'objective', 0, 7},
  ["1"] = {'objective', 0, 1},
  ["2"] = {'objective', 0, 2},
  ["3"] = {'objective', 0, 3},
  ["4"] = {'objective', 0, 4},
  ["5"] = {'objective', 0, 5},
  ["6"] = {'objective', 0, 6},
}

object_mapping = {
  column = '334a2c',
  wall = '8a2788',
  door = 'e77f34',
  ender = '4acf80',
  objective = 'c7fd82',
}

layouts = {
  {
    name = "1. Conduit",
    deploy = "Horizontal",
    layout = [[


        A
       o|
+D+D+-+ +U+-+D+
  |   | |   |
 o+ o +_+ o +o
  |   | |   |
+U+-+D+ +-+U+U+
      |o
      V


    ]],
  }, {
    name = "2. Channels",
    deploy = "Horizontal",
    layout = [[
    +     +
    |     |
    + +-+U+
    | R   |
  o +-+ o + o
    R     L
+U+-+     +-+-+
    R     L
  o + o +-+ o
    |   R |
    +D+-+ +
    |     |
    +     +
    ]],
  }, {
    name = "3. Hub",
    deploy = "Horizontal",
    layout = [[


      +-+-+
    o R   R
+U+-+ + o +-+U+
    | |   R
  o + +-+-+ o
    | |   L
+D+-+ + o +-+U+
    o R   R
      +-+-+


    ]],
  }, {
    name = "4. Bridge",
    deploy = "Horizontal",
    layout = [[


+U+=+U+=+=+
    R     R
  o +=> o + o
    |     |
+=+U+     +D+=+
    |     |
  o + o <=+ o
    L     R
    +=+=+U+=+D+


    ]],
  }, {
    name = "5. Vault",
    deploy = "Horizontal",
    layout = [[


    +-+-+ +-+D+
    L   R |
  o + o + + o
    |   | L
+U+=+=> +D+
    |   | R
  o + o + + o
    R   R |
    +-+-+ +-+D+


    ]],
  }, {
    name = "6. Store",
    deploy = "Vertical",
    layout = [[
    +     +
    L     R
    + <=> +
    |  o  |
    +     +
   o|     |o
    +U+=+U+
    L  o  R
  +=+=+ +=+=+
  L   | |   R
  + o + + o +
  |   R L   |
  +   + +   +
    ]],
  }, {
    name = "7. Hangar",
    deploy = "Vertical",
    layout = [[
        +
        L
    A 1 + 2
    |   |
    +   +-+-+U+
    |   L
+U+-+3+-+4+-+D+
      R   |
+D+-+-+   +
      |   |
    5 + 6 V
      R
      +
    ]]
  }, {
    name = "8. Hold",
    deploy = "Vertical",
    layout = [[
    +   +
    R   L
    + o + o
    L   |
  +=+=+D+=+=+
  |         R
  + o<-+->o +
  L         |
  +=+=+U+=+=+
      |   R
    o + o +
      R   L
      +   +
    ]],
  }, {
    name = "9. Lock",
    deploy = "Vertical",
    layout = [[
    +   +
    L   R
    + o + o
    |   |
  A +=+=+=+U+
  |     R   |
  + o +U+ o +
  |   L     |
  +D+=+=+=+ V
      |   |
    o + o +
      L   R
      +   +
    ]],
  }, {
    name = "10. Duct",
    deploy = "Vertical",
    layout = [[
    +   +
    L o R
  +=+=+D+
  |     |
  + o A + o
  L   | |
  +=+U+ +D+=+
      | |   R
    o + V o +
      |     |
      +U+=+=+
      L o R
      +   +
    ]],
  },
}

selection_guid = '9db70a'
extra_guids_to_track = {}

function adjustPiece(object, piece, pieceCounters)
  if piece == 'objective' then
    pieceCounters.objectives = pieceCounters.objectives + 1
    object.setScale({1,0.1,1})
    object.setName('Objective ' .. pieceCounters.objectives)
  end
  if piece == 'door' then
    pieceCounters.doors = pieceCounters.doors + 1
    object.setName('Hatchway Closed ' .. pieceCounters.doors)
  end
end

function place(player, value, id)
  remove()
  selection = getObjectFromGUID(selection_guid).getStateId()
  local layout = layouts[selection].layout
  local layout_table = {string.byte(layout, 1, #layout)}
  local symbol
  local object
  -- 9.66 in offset comes from measuring the distance on the ITD board grid
  -- 0.395 is a magic scalar that comes from mapping this to TTS coordinates
  -- measured using trial and error until it looked good
  local offset = (9.66 / 2) * 0.395
  local initial_x = offset * 7 * (1)
  local initial_z = offset * 6 * (-1)
  local x = initial_x
  local y = 0
  local z = initial_z

  local pieceCounters = {
    doors = 0,
    objectives = 0
  }
  for i=1, #layout_table do
    symbol = string.char(layout_table[i])
    if symbol == '\n' then
      x = initial_x
      z = z + offset
    else
      local piece = piece_mapping[symbol]
      if piece then
        object = getObjectFromGUID(object_mapping[piece[1]])
        if object then
          local copy = object.clone({ position = {x,y,z}})
          adjustPiece(copy, piece[1], pieceCounters)
          copy.setLock(true)
          copy.rotate({0,piece[2],0})
          copy.addTag('ITD_Piece')
          -- small hack here as original pieces don't have the Tag, but their other states do
          -- it might be better to dynamically create them here
          -- so that original pieces are not on the table and we can add any customization we need
        end
      end
      x = x - offset
    end
  end
  if layouts[selection].deploy == "Horizontal" then
    local scale = {14,1.2,14}
    local rotation = {0,90,0}
    createBarrier({initial_x - 7*offset, 0, initial_z + 2*offset}, {0.2,0.2,0.8,0.5}, scale, rotation)
    createBarrier({initial_x - 7*offset, 0, initial_z + 6*offset}, {1,1,1,0.5}, scale, rotation)
    createBarrier({initial_x - 7*offset, 0, initial_z + 10*offset}, {1,0,0,0.5}, scale, rotation)
  elseif layouts[selection].deploy == "Vertical" then
    local scale = {12,1.2,12}
    local rotation = {0,0,0}
    createBarrier({initial_x - 2*offset, 0, initial_z + 6*offset}, {1,0,0,0.5}, scale, rotation)
    createBarrier({initial_x - 7*offset, 0, initial_z + 6*offset}, {1,1,1,0.5}, scale, rotation)
    createBarrier({initial_x - 12*offset, 0, initial_z + 6*offset}, {0.2,0.2,0.8,0.5}, scale, rotation)
  end
end

function remove(player, value, id)
  for _, piece in pairs(getObjectsWithTag('ITD_Piece')) do
    if piece then
      piece.destruct()
    end
  end
  for i, guid in pairs(extra_guids_to_track) do
    if guid then
      o = getObjectFromGUID(guid)
      if o then
        o.destruct()
      end
    end
  end
  extra_guids_to_track = {}
end

function onSelectMission(player, value)
  remove()
  selection = tonumber(value)
  selection_guid = getObjectFromGUID(selection_guid).setState(selection).getGUID()
end

function createBarrier(pos, color, scale, rotation)
    --print("MAT :"..customInfo.diffuse..":")
    local clone=spawnObject({
        type              = "Custom_Model",
        position          = pos
    })
    clone.setLuaScript("")
    clone.setCustomObject({
        mesh="http://cloud-3.steamusercontent.com/ugc/929311677228065725/08A047560B3B217463EB39969C8BD76749A0A723/",
        collider="http://cloud-3.steamusercontent.com/ugc/929311677228789723/30C5477595CD1E06E955200433657907C192EA8A/",
        material = 3
    })
    clone.setColorTint(color)
    clone.setScale(scale)
    clone.setRotation(rotation)
    clone.setLock(true)
    clone.interactable=false
    clone.addTag('ITD_Piece')
end
